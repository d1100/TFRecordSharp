// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WikiDailyOHLCV.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D1100.Data {

  /// <summary>Holder for reflection information generated from WikiDailyOHLCV.proto</summary>
  public static partial class WikiDailyOHLCVReflection {

    #region Descriptor
    /// <summary>File descriptor for WikiDailyOHLCV.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WikiDailyOHLCVReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRXaWtpRGFpbHlPSExDVi5wcm90bxIKZDExMDAuZGF0YSLzAQoOV2lraURh",
            "aWx5T0hMQ1YSDgoGdGlja2VyGAEgASgJEgoKAnRzGAIgASgDEgwKBG9wZW4Y",
            "AyABKAESDAoEaGlnaBgEIAEoARILCgNsb3cYBSABKAESDQoFY2xvc2UYBiAB",
            "KAESDgoGdm9sdW1lGAcgASgBEhIKCmV4RGl2aWRlbmQYCCABKAESEgoKc3Bs",
            "aXRSYXRpbxgJIAEoARIPCgdhZGpPcGVuGAogASgBEg8KB2FkakhpZ2gYCyAB",
            "KAESDgoGYWRqTG93GAwgASgBEhAKCGFkakNsb3NlGA0gASgBEhEKCWFkalZv",
            "bHVtZRgOIAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D1100.Data.WikiDailyOHLCV), global::D1100.Data.WikiDailyOHLCV.Parser, new[]{ "Ticker", "Ts", "Open", "High", "Low", "Close", "Volume", "ExDividend", "SplitRatio", "AdjOpen", "AdjHigh", "AdjLow", "AdjClose", "AdjVolume" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Represents a single observation of EOD dailyOHLCV
  /// with both adjusted and unadjusted values
  /// in particular that found at
  /// https://www.quandl.com/databases/WIKIP
  /// 
  /// data comes like this from the CSV
  /// 0 ticker A
  /// 1 date 1999-11-18
  /// 2 open 45.5
  /// 3 high 50.0
  /// 4 low 40.0
  /// 5 close 44.0
  /// 6 volume 44739900.0
  /// 7 ex-dividend 0.0
  /// 8 split_ratio 1.0
  /// 9 adj_open 31.041951216877
  /// 10 adj_high 34.112034304261
  /// 11 adj_low 27.289627443409
  /// 12 adj_close 30.018590187749
  /// 13 adj_volume 44739900.0
  ///
  /// which I leave intact except for converting the date to unix timestamp
  /// </summary>
  public sealed partial class WikiDailyOHLCV : pb::IMessage<WikiDailyOHLCV> {
    private static readonly pb::MessageParser<WikiDailyOHLCV> _parser = new pb::MessageParser<WikiDailyOHLCV>(() => new WikiDailyOHLCV());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WikiDailyOHLCV> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D1100.Data.WikiDailyOHLCVReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyOHLCV() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyOHLCV(WikiDailyOHLCV other) : this() {
      ticker_ = other.ticker_;
      ts_ = other.ts_;
      open_ = other.open_;
      high_ = other.high_;
      low_ = other.low_;
      close_ = other.close_;
      volume_ = other.volume_;
      exDividend_ = other.exDividend_;
      splitRatio_ = other.splitRatio_;
      adjOpen_ = other.adjOpen_;
      adjHigh_ = other.adjHigh_;
      adjLow_ = other.adjLow_;
      adjClose_ = other.adjClose_;
      adjVolume_ = other.adjVolume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyOHLCV Clone() {
      return new WikiDailyOHLCV(this);
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 1;
    private string ticker_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ts" field.</summary>
    public const int TsFieldNumber = 2;
    private long ts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ts {
      get { return ts_; }
      set {
        ts_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 3;
    private double open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 4;
    private double high_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 5;
    private double low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 6;
    private double close_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 7;
    private double volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "exDividend" field.</summary>
    public const int ExDividendFieldNumber = 8;
    private double exDividend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExDividend {
      get { return exDividend_; }
      set {
        exDividend_ = value;
      }
    }

    /// <summary>Field number for the "splitRatio" field.</summary>
    public const int SplitRatioFieldNumber = 9;
    private double splitRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SplitRatio {
      get { return splitRatio_; }
      set {
        splitRatio_ = value;
      }
    }

    /// <summary>Field number for the "adjOpen" field.</summary>
    public const int AdjOpenFieldNumber = 10;
    private double adjOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdjOpen {
      get { return adjOpen_; }
      set {
        adjOpen_ = value;
      }
    }

    /// <summary>Field number for the "adjHigh" field.</summary>
    public const int AdjHighFieldNumber = 11;
    private double adjHigh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdjHigh {
      get { return adjHigh_; }
      set {
        adjHigh_ = value;
      }
    }

    /// <summary>Field number for the "adjLow" field.</summary>
    public const int AdjLowFieldNumber = 12;
    private double adjLow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdjLow {
      get { return adjLow_; }
      set {
        adjLow_ = value;
      }
    }

    /// <summary>Field number for the "adjClose" field.</summary>
    public const int AdjCloseFieldNumber = 13;
    private double adjClose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdjClose {
      get { return adjClose_; }
      set {
        adjClose_ = value;
      }
    }

    /// <summary>Field number for the "adjVolume" field.</summary>
    public const int AdjVolumeFieldNumber = 14;
    private double adjVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdjVolume {
      get { return adjVolume_; }
      set {
        adjVolume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WikiDailyOHLCV);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WikiDailyOHLCV other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ticker != other.Ticker) return false;
      if (Ts != other.Ts) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Open, other.Open)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(High, other.High)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Low, other.Low)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Close, other.Close)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExDividend, other.ExDividend)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SplitRatio, other.SplitRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjOpen, other.AdjOpen)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjHigh, other.AdjHigh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjLow, other.AdjLow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjClose, other.AdjClose)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjVolume, other.AdjVolume)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (Ts != 0L) hash ^= Ts.GetHashCode();
      if (Open != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Open);
      if (High != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(High);
      if (Low != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Low);
      if (Close != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Close);
      if (Volume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume);
      if (ExDividend != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExDividend);
      if (SplitRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SplitRatio);
      if (AdjOpen != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjOpen);
      if (AdjHigh != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjHigh);
      if (AdjLow != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjLow);
      if (AdjClose != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjClose);
      if (AdjVolume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjVolume);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ticker.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ticker);
      }
      if (Ts != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Ts);
      }
      if (Open != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Open);
      }
      if (High != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(High);
      }
      if (Low != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Low);
      }
      if (Close != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Close);
      }
      if (Volume != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Volume);
      }
      if (ExDividend != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ExDividend);
      }
      if (SplitRatio != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(SplitRatio);
      }
      if (AdjOpen != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(AdjOpen);
      }
      if (AdjHigh != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AdjHigh);
      }
      if (AdjLow != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(AdjLow);
      }
      if (AdjClose != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(AdjClose);
      }
      if (AdjVolume != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(AdjVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (Ts != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ts);
      }
      if (Open != 0D) {
        size += 1 + 8;
      }
      if (High != 0D) {
        size += 1 + 8;
      }
      if (Low != 0D) {
        size += 1 + 8;
      }
      if (Close != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0D) {
        size += 1 + 8;
      }
      if (ExDividend != 0D) {
        size += 1 + 8;
      }
      if (SplitRatio != 0D) {
        size += 1 + 8;
      }
      if (AdjOpen != 0D) {
        size += 1 + 8;
      }
      if (AdjHigh != 0D) {
        size += 1 + 8;
      }
      if (AdjLow != 0D) {
        size += 1 + 8;
      }
      if (AdjClose != 0D) {
        size += 1 + 8;
      }
      if (AdjVolume != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WikiDailyOHLCV other) {
      if (other == null) {
        return;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.Ts != 0L) {
        Ts = other.Ts;
      }
      if (other.Open != 0D) {
        Open = other.Open;
      }
      if (other.High != 0D) {
        High = other.High;
      }
      if (other.Low != 0D) {
        Low = other.Low;
      }
      if (other.Close != 0D) {
        Close = other.Close;
      }
      if (other.Volume != 0D) {
        Volume = other.Volume;
      }
      if (other.ExDividend != 0D) {
        ExDividend = other.ExDividend;
      }
      if (other.SplitRatio != 0D) {
        SplitRatio = other.SplitRatio;
      }
      if (other.AdjOpen != 0D) {
        AdjOpen = other.AdjOpen;
      }
      if (other.AdjHigh != 0D) {
        AdjHigh = other.AdjHigh;
      }
      if (other.AdjLow != 0D) {
        AdjLow = other.AdjLow;
      }
      if (other.AdjClose != 0D) {
        AdjClose = other.AdjClose;
      }
      if (other.AdjVolume != 0D) {
        AdjVolume = other.AdjVolume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ticker = input.ReadString();
            break;
          }
          case 16: {
            Ts = input.ReadInt64();
            break;
          }
          case 25: {
            Open = input.ReadDouble();
            break;
          }
          case 33: {
            High = input.ReadDouble();
            break;
          }
          case 41: {
            Low = input.ReadDouble();
            break;
          }
          case 49: {
            Close = input.ReadDouble();
            break;
          }
          case 57: {
            Volume = input.ReadDouble();
            break;
          }
          case 65: {
            ExDividend = input.ReadDouble();
            break;
          }
          case 73: {
            SplitRatio = input.ReadDouble();
            break;
          }
          case 81: {
            AdjOpen = input.ReadDouble();
            break;
          }
          case 89: {
            AdjHigh = input.ReadDouble();
            break;
          }
          case 97: {
            AdjLow = input.ReadDouble();
            break;
          }
          case 105: {
            AdjClose = input.ReadDouble();
            break;
          }
          case 113: {
            AdjVolume = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
